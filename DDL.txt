// create keyspaces and tables
CREATE KEYSPACE test_hn WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 3};
// change replication_factor to 2
alter keyspace test_hn with replication = {'class':'SimpleStrategy', 'replication_factor' : 2};

describe keyspace test_hn;

use test_hn;

--CREATING TABLES
--USER BY ID-- QUERY A CERTAIN USER'S INFO
CREATE TABLE IF NOT EXISTS USER(
ID VARCHAR,
ABOUT VARCHAR,
DELAY INT,
KARMA INT,
SUBMITTED INT,
CREATED TIMESTAMP,
PRIMARY KEY(ID)
);

--USER BY YEAR-- QUERY GIVEN YEAR USER'S INFO
CREATE TABLE IF NOT EXISTS USER_BY_YEAR(
YEAR INT,
ID VARCHAR,
ABOUT VARCHAR,
DELAY INT,
KARMA INT,
SUBMITTED INT,
CREATED TIMESTAMP,
PRIMARY KEY(YEAR,submitted,karma,id))
;

//CREATE JOB_BY_MONTH TABLE
CREATE TABLE IF NOT EXISTS JOB_BY_MONTH (
ID INT,
"BY" VARCHAR,
SCORE INT,
YEAR INT,
MONTH INT,
DAY INT,
TITLE VARCHAR,
URL VARCHAR,
PRIMARY KEY((YEAR,MONTH),DAY,"BY",TITLE))
WITH CLUSTERING ORDER BY (DAY DESC);

--TOP STORIES BASED ON SCORES ON A CERTAIN YEAR
CREATE TABLE IF NOT EXISTS TOP_STORIES(
ID INT,
"BY" VARCHAR,
DESCENDANTS INT,
KIDS LIST<INT>,
SCORE INT,
YEAR INT,
MONTH INT,
DAY INT,
TITLE VARCHAR,
URL VARCHAR,
PRIMARY KEY(YEAR,SCORE,MONTH,ID))
WITH CLUSTERING ORDER BY (SCORE DESC,MONTH DESC);

--COMMENTS BY A CERTAIN USER
CREATE TABLE IF NOT EXISTS COMMENT_BY_USER (
ID INT,
"BY" VARCHAR,
PARENT INT,
KIDS LIST<INT>,
TEXT VARCHAR,
TIME TIMESTAMP,
PRIMARY KEY("BY",TIME,ID))
WITH CLUSTERING ORDER BY (TIME DESC);

--ASK TABLE
CREATE TABLE ASK (
ID INT,
"BY" VARCHAR,
DESCENDANTS INT,
KIDS LIST<INT>,
SCORE INT,
TIME TIMESTAMP,
TITLE VARCHAR,
URL VARCHAR,
PRIMARY KEY("BY",TIME,ID))
WITH CLUSTERING ORDER BY (TIME DESC);

--POLL TABLE
CREATE TABLE POLL (
ID INT,
"BY" VARCHAR,
DESCENDANTS INT,
KIDS LIST<INT>,
PARTS LIST<INT>,
SCORE INT,
TIME TIMESTAMP,
TITLE VARCHAR,
PRIMARY KEY("BY",SCORE,TIME,ID))
WITH CLUSTERING ORDER BY (SCORE DESC,TIME DESC);

--POLLOPT
CREATE TABLE POLLOPT (
ID INT,
"BY" VARCHAR,
POLL INT,
SCORE INT,
TIME TIMESTAMP,
TEXT VARCHAR,
PRIMARY KEY(POLL,TIME,ID))
WITH CLUSTERING ORDER BY (TIME DESC);

//ALTER TABLES
ALTER TABLE USER_BY_YEAR DROP ABOUT;

//DESCRIBE TABLES IN CASSANDRA
DESCRIBE TABLES;
DESCRIBE JOB;
DESCRIBE COMMENT;
DESCRIBE STORY;
DESCRIBE ASK;
DESCRIBE POLL;
DESCRIBE POLLOPT;
DESCRIBE USER;
DESCRIBE USER_BY_YEAR;

--CREATE MATERIALIZED VIEW
--QUERY THE GIVEN YEAR CREATED USERS WHO GET HIGH SUBMITTED
CREATE MATERIALIZED VIEW USER_SUBMITTED AS 
SELECT YEAR FROM USER_BY_YEAR
WHERE YEAR IS NOT NULL AND SUBMITTED IS NOT NULL AND KARMA IS NOT NULL AND ID IS NOT NULL
PRIMARY KEY(YEAR,SUBMITTED,KARMA,ID)
WITH CLUSTERING ORDER BY (SUBMITTED DESC); 

--GET 2019 CREATED USER WHO GET HIGHEST SUBMITTED
SELECT * FROM USER_SUBMITTED WHERE YEAR=2019 LIMIT 1;

--GET THE TOP 3 USERS IN EVERY YEAR
SELECT * FROM USER_BY_YEAR 
PER PARTITION LIMIT 3;

--GET MONTHLY JOBS INFO
SELECT DAY,"BY",TITLE FROM JOB_BY_MONTH WHERE YEAR=2019 AND MONTH=3;

--YEARLY TOP STORIES
SELECT * FROM TOP_STORIES WHERE YEAR=2019 LIMIT 5;

--TOTAL COMMENTS BY A GIVEN USER(JOHNFEN)
SELECT "BY",COUNT(ID) FROM COMMENT_BY_USER WHERE "BY"='JOHNFEN';
